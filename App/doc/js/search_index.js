var search_data = {"index":{"searchIndex":["client","clientdriver","registrardriver","registrarthread","serverdriver","serverthread","user","users","break_into_pieces()","convert_time_to_military_float()","get_availability_information_from_user()","get_available_times()","make_appointment()","new()","string_properly_formatted?()","user_that_exists?()","user_that_exists?()","valid_time?()"],"longSearchIndex":["client","clientdriver","registrardriver","registrarthread","serverdriver","serverthread","user","users","client#break_into_pieces()","client#convert_time_to_military_float()","client#get_availability_information_from_user()","client#get_available_times()","client#make_appointment()","users::new()","client#string_properly_formatted?()","serverthread#user_that_exists?()","users#user_that_exists?()","client#valid_time?()"],"info":[["Client","","Client.html","","<p>acts as an interface between the user and the registrar to obtain and\ndisplay informaiton to the client. …\n"],["ClientDriver","","ClientDriver.html","",""],["RegistrarDriver","","RegistrarDriver.html","",""],["RegistrarThread","","RegistrarThread.html","",""],["ServerDriver","","ServerDriver.html","",""],["ServerThread","","ServerThread.html","",""],["User","","User.html","",""],["Users","","Users.html","",""],["break_into_pieces","Client","Client.html#method-i-break_into_pieces","(string_time)","<p>receives a string time in format hh:mm:(AM|PM) and returns an array\ncontaining the hour in location 0, …\n"],["convert_time_to_military_float","Client","Client.html#method-i-convert_time_to_military_float","(string_time)","<p>Takes a time in string format and turns that time into a military time\nfloat\n<p><strong>Args</strong> :\n<p><code>string_time</code> -&gt; the …\n"],["get_availability_information_from_user","Client","Client.html#method-i-get_availability_information_from_user","(date = nil, doctor = nil, appointment_length = nil)","<p>Gets the date, doctor, and availability informaiton from the user unless\nthe information is passed in …\n"],["get_available_times","Client","Client.html#method-i-get_available_times","(date, doctor, appointment_length)","<p>Given a specified doctor, date, and appointment_length, this method will\nreturn the list of a particular …\n"],["make_appointment","Client","Client.html#method-i-make_appointment","(date, doctor, start_time, end_time)","<p>This method will take in the users date, the time that the appointment\nbegins, and the time that the …\n"],["new","Users","Users.html#method-c-new","()",""],["string_properly_formatted?","Client","Client.html#method-i-string_properly_formatted-3F","(string_time)","<p>receives the time as a string and verifies that the format is accurate.\n<p><strong>Args</strong> :\n<p><code>string_time</code> -&gt; the time …\n"],["user_that_exists?","ServerThread","ServerThread.html#method-i-user_that_exists-3F","(username)",""],["user_that_exists?","Users","Users.html#method-i-user_that_exists-3F","(username)","<p>@param username, the name of the user\n"],["valid_time?","Client","Client.html#method-i-valid_time-3F","(float_military_time)","<p>Receives a float in military time and returns that time to the caller.\n<p><strong>Args</strong> :\n<p><code>float_military_time</code> -&gt; …\n"]]}}