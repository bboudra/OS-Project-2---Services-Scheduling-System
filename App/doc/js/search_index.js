var search_data = {"index":{"searchIndex":["client","clientdriver","day","dentistoffice","registrardriver","registrarthread","schedule","serverdriver","serverthread","add_appointment()","convert_time_to_military_float()","convert_to_presentable_time()","convert_to_time_slot_from_string_time()","get_appointment_type()","get_availability_information_from_user()","get_available_times()","get_date()","get_dentists_office()","get_free_times()","get_free_times()","get_office_port()","get_office_port()","get_user_time_choice()","is_free_time_slot()","make_appointment()","new()","new()","new()","new()","new()","new()","new()","run()","run()","run()","run()","set_appointment()","start_run()","valid_appointment_type?()","valid_date?()","valid_doctor?()","valid_time?()"],"longSearchIndex":["client","clientdriver","day","dentistoffice","registrardriver","registrarthread","schedule","serverdriver","serverthread","day#add_appointment()","client#convert_time_to_military_float()","day#convert_to_presentable_time()","day#convert_to_time_slot_from_string_time()","client#get_appointment_type()","client#get_availability_information_from_user()","client#get_available_times()","client#get_date()","client#get_dentists_office()","day#get_free_times()","schedule#get_free_times()","dentistoffice#get_office_port()","registrarthread#get_office_port()","client#get_user_time_choice()","day#is_free_time_slot()","client#make_appointment()","client::new()","day::new()","registrardriver::new()","registrarthread::new()","schedule::new()","serverdriver::new()","serverthread::new()","registrardriver#run()","registrarthread#run()","serverdriver#run()","serverthread#run()","schedule#set_appointment()","clientdriver#start_run()","client#valid_appointment_type?()","client#valid_date?()","client#valid_doctor?()","client#valid_time?()"],"info":[["Client","","Client.html","","<p>acts as an interface between the user and the registrar to obtain and\ndisplay informaiton to the client. …\n"],["ClientDriver","","ClientDriver.html","","<p>starts client operations\n"],["Day","","Day.html","",""],["DentistOffice","","DentistOffice.html","","<p>this module will hold the list of dentist offices\n<p><strong>Author</strong> -Benjamin Boudra\n\n"],["RegistrarDriver","","RegistrarDriver.html","","<p>starts registrar operations\n"],["RegistrarThread","","RegistrarThread.html","","<p>A class designed to handle the registrar&#39;s operations at a thread level\n<p><strong>Author</strong> :\n<p>Benjamin Boudra\n"],["Schedule","","Schedule.html","",""],["ServerDriver","","ServerDriver.html","","<p>starts the server operations\n"],["ServerThread","","ServerThread.html","",""],["add_appointment","Day","Day.html#method-i-add_appointment","(time_slot, appointment_length)","<p>Adds a appointment to the schedule given a particular starting time slot\nand appointment_length\n<p><strong>Args</strong> : …\n"],["convert_time_to_military_float","Client","Client.html#method-i-convert_time_to_military_float","(string_time)","<p>Takes a time in string format and turns that time into a military time\nfloat\n<p><strong>Args</strong> :\n<p><code>string_time</code> -&gt; the …\n"],["convert_to_presentable_time","Day","Day.html#method-i-convert_to_presentable_time","(time)","<p>coverts the time as a float into the military time-string\n<p><strong>Args</strong> :\n<p><code>time</code> -&gt; the time as a float\n"],["convert_to_time_slot_from_string_time","Day","Day.html#method-i-convert_to_time_slot_from_string_time","(string_military_time)","<p>given a military time time string, converts that string into a time slot\n<p><strong>Args</strong> :\n<p><code>string_military_time</code> -&gt; …\n"],["get_appointment_type","Client","Client.html#method-i-get_appointment_type","()","<p>Gets the appointment type from the user and returns it to the caller.\n<p><strong>Args</strong> :\n<p><strong>Returns</strong> :\n"],["get_availability_information_from_user","Client","Client.html#method-i-get_availability_information_from_user","(date = nil, doctors_office = nil, appointment_type = nil)","<p>Gets the date, doctor, and availability information from the user unless\nthe information is passed in …\n"],["get_available_times","Client","Client.html#method-i-get_available_times","(message)","<p>Given a specified doctors office, date, and appointment_length, this method\nwill return the list of a …\n"],["get_date","Client","Client.html#method-i-get_date","()","<p>Gets the desired appointment date from the user and returns it to the\ncaller\n<p><strong>Args</strong> :\n<p><strong>Returns</strong> :\n"],["get_dentists_office","Client","Client.html#method-i-get_dentists_office","()","<p>Gets the name desired doctors office from the user.\n<p><strong>Args</strong> :\n<p><strong>Returns</strong> :\n"],["get_free_times","Day","Day.html#method-i-get_free_times","(appointment_length)","<p>the list of free times for an appointment of a given length\n<p><strong>Args</strong> :\n<p><code>appointment_length</code> -&gt; the length …\n"],["get_free_times","Schedule","Schedule.html#method-i-get_free_times","(date, appointment_length)","<p>Given a specific date and appointment length, retrieves the list of free\ntimes for that appointment length …\n"],["get_office_port","DentistOffice","DentistOffice.html#method-i-get_office_port","(office_name)","<p>Retrieves the server port number for a given office\n"],["get_office_port","RegistrarThread","RegistrarThread.html#method-i-get_office_port","(office_name)","<p>Helper method to retrieve a port given a specific office - written because\ndentist office is not functioning …\n"],["get_user_time_choice","Client","Client.html#method-i-get_user_time_choice","(list_of_times)","<p>display&#39;s appointment list, checks to make sure choice is in list of\noptions, or -1 if they choose …\n"],["is_free_time_slot","Day","Day.html#method-i-is_free_time_slot","(current_time_slot, appointment_length)","<p>determines whether a particular time_slot is currently free\n<p><strong>Args</strong> :\n<p><code>current_time_slot</code> -&gt; the desired …\n"],["make_appointment","Client","Client.html#method-i-make_appointment","(date = nil,doctors_office = nil,start_time = nil, appointment_length = nil)","<p>This method will take in the users date, the time that the appointment\nbegins, and the time that the …\n"],["new","Client","Client.html#method-c-new","()",""],["new","Day","Day.html#method-c-new","(date)","<p>The initialization information for that class.\n"],["new","RegistrarDriver","RegistrarDriver.html#method-c-new","()",""],["new","RegistrarThread","RegistrarThread.html#method-c-new","(client)",""],["new","Schedule","Schedule.html#method-c-new","()",""],["new","ServerDriver","ServerDriver.html#method-c-new","(port)",""],["new","ServerThread","ServerThread.html#method-c-new","(client)","<p>initializes the server\n"],["run","RegistrarDriver","RegistrarDriver.html#method-i-run","()","<p>handles registrar operations at a multithreaded level\n"],["run","RegistrarThread","RegistrarThread.html#method-i-run","()","<p>Handles the registrar&#39;s operations at a thread level\n"],["run","ServerDriver","ServerDriver.html#method-i-run","()","<p>handles server operations at a multithreaeded level\n"],["run","ServerThread","ServerThread.html#method-i-run","()","<p>runs the server operations at a thread level\n"],["set_appointment","Schedule","Schedule.html#method-i-set_appointment","(date,appointment_length, start_time)","<p>Given a specific date, appointment length, and start_time, registers the\nuser for an appointment if one …\n"],["start_run","ClientDriver","ClientDriver.html#method-i-start_run","()",""],["valid_appointment_type?","Client","Client.html#method-i-valid_appointment_type-3F","(appointment_type_string)",""],["valid_date?","Client","Client.html#method-i-valid_date-3F","(string_date)","<p>Receives the date as a string and verifies that the format and rang are\nvalid.\n<p><strong>Args</strong> :\n<p><code>string_date</code> -&gt; …\n"],["valid_doctor?","Client","Client.html#method-i-valid_doctor-3F","(doctor_name)",""],["valid_time?","Client","Client.html#method-i-valid_time-3F","(time_string)","<p>Receives a string that contains clock time and determines whether or not\nthat that time string is valid. …\n"]]}}